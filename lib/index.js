// Generated by CoffeeScript 1.6.2
/*

  Call Connect/Express apps over arbitrary streams (even WebSocket)
*/

var EventEmitter, Request, Response, express, rpc,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

express = require('express');

EventEmitter = require('events').EventEmitter;

rpc = require('stream-rpc');

Request = (function() {
  function Request(message) {
    this.message = message;
    this.method = message.method || 'GET';
    this.url = message.url || '/';
    this.headers = message.headers || {};
    this.body = message.body || {};
  }

  return Request;

})();

Response = (function(_super) {
  __extends(Response, _super);

  function Response() {
    this.headers = {};
    this.statusCode = 200;
  }

  Response.prototype.send = function(statusCode, body) {
    if (!body) {
      body = statusCode;
      statusCode = 200;
    }
    this.statusCode = statusCode;
    return this.end(body);
  };

  Response.prototype.end = function(data) {
    if (data) {
      this.body = data;
    }
    if (!this.headers['Content-Type']) {
      this.headers['Connect-Type'] = 'application/json';
    }
    return this.emit('end');
  };

  Response.prototype.getHeader = function(name) {
    return this.headers[name];
  };

  Response.prototype.setHeader = function(name, value) {
    return this.headers[name] = value;
  };

  return Response;

})(EventEmitter);

module.exports = function(app) {
  var outerApp, stream;

  outerApp = express();
  outerApp.request = {
    __proto__: Request.prototype
  };
  outerApp.response = {
    __proto__: Response.prototype
  };
  outerApp.use(app);
  stream = rpc({
    handle: function(message, done) {
      var req, res;

      req = new Request(message);
      res = new Response();
      res.on('end', function() {
        return done(null, {
          statusCode: res.statusCode,
          body: res.body,
          headers: res.headers
        });
      });
      return app.handle(req, res);
    }
  });
  return stream;
};
